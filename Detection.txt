int main() {
    float a = 10.5;
    int b = 20;
    if (a > b) {
        b = b + 1;
    }
    return 0;
}





#include <iostream>
#include <fstream>
#include <sstream>
#include <regex>
#include <vector>
#include <unordered_set>

using namespace std;


unordered_set<string> keywords = {
    "auto", "break", "case", "char", "const", "continue", "default",
    "do", "double", "else", "enum", "extern", "float", "for", "goto",
    "if", "int", "long", "register", "return", "short", "signed", "sizeof",
    "static", "struct", "switch", "typedef", "union", "unsigned", "void",
    "volatile", "while", "main"
};


unordered_set<string> operators = {
    "+", "-", "*", "/", "%", "++", "--", "==", "!=", ">=", "<=", ">", "<", "=",
    "&&", "||", "!", "+=", "-=", "*=", "/=", "%="
};


unordered_set<char> delimiters = { ';', ',', '(', ')', '{', '}', '[', ']' };


bool isValidIdentifier(const string& token) {
    if (token.empty() || isdigit(token[0]) || (!isalpha(token[0]) && token[0] != '_'))
        return false;
    for (char ch : token) {
        if (!isalnum(ch) && ch != '_') return false;
    }
    return true;
}


bool isInteger(const string& token) {
    return regex_match(token, regex("^-?[0-9]+$"));
}


bool isRealNumber(const string& token) {
    return regex_match(token, regex("^-?[0-9]*\\.[0-9]+$"));
}

int main() {
    ifstream file("input_code.cpp");
    if (!file) {
        cerr << "File could not be opened!" << endl;
        return 1;
    }

    string line;
    while (getline(file, line)) {
        stringstream ss(line);
        string token;

        while (ss >> token) {
          
            while (!token.empty() && delimiters.count(token.front())) {
                cout << "Delimiter: " << token.front() << endl;
                token.erase(0, 1);
            }
            while (!token.empty() && delimiters.count(token.back())) {
                cout << "Delimiter: " << token.back() << endl;
                token.pop_back();
            }

            
            if (token.empty()) continue;

            if (keywords.count(token)) {
                cout << "Keyword: " << token << endl;
            } else if (operators.count(token)) {
                cout << "Operator: " << token << endl;
            } else if (isInteger(token)) {
                cout << "Integer: " << token << endl;
            } else if (isRealNumber(token)) {
                cout << "Real Number: " << token << endl;
            } else if (isValidIdentifier(token)) {
                cout << "Valid Identifier: " << token << endl;
            } else {
                cout << "Invalid Identifier: " << token << endl;
            }
        }

        
        for (char ch : line) {
            if (delimiters.count(ch)) {
                cout << "Delimiter: " << ch << endl;
            }
        }
    }

    file.close();
    return 0;
} 